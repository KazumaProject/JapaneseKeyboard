name: Android Release CI

on:
  push:
    tags:
      - 'v*'  # v1.0.0 のようにタグをプッシュしたときに実行

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # 必要に応じて matrix を使って複数 API Level / ビルドツールを並列に回せますが、
        # 今回は単一のセットで大丈夫なら省略しても OK です。
        api-level: [ 35 ]
        build-tools: [ '35.0.0' ]
        target: [ 'android-35' ]

    steps:
      # 1. コードチェックアウト
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 セットアップ
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Android SDK セットアップ
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: ${{ matrix.api-level }}
          build-tools: ${{ matrix.build-tools }}
          target: ${{ matrix.target }}

      # 4. Gradle キャッシュ
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 5. JKS を Secrets から復号して my-release-key.jks に出力
      - name: Decode JKS from Base64
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > my-release-key.jks

      # 6. gradle.properties に署名情報を追記
      - name: Add signing info to gradle.properties
        run: |
          echo "" >> gradle.properties
          echo "# --- SigningConfig for CI ---" >> gradle.properties
          echo "KEYSTORE_FILE=my-release-key.jks" >> gradle.properties
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> gradle.properties
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> gradle.properties
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> gradle.properties

      # 7. リリース APK をビルド（assembleRelease）
      - name: Build Signed Release APK
        run: ./gradlew clean assembleRelease

      # 8. GitHub リリースを作成（または取得）する
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # github.ref が "refs/tags/v1.0.0" のように入るので、tag_name にそのまま渡す
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            • このリリースには署名済みのAPKが含まれます。
            • バージョン: ${{ github.ref_name }}
      # ──────────────────────────────────────────────────────────────────────────────
      # 9. 上記で作成したリリースに APK をアップロードする
      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive